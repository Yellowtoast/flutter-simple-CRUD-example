// Mocks generated by Mockito 5.4.2 from annotations
// in tech_test/test/feature/login/unit_test/login_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:tech_test/core/utils/failure/failure.dart' as _i6;
import 'package:tech_test/core/utils/pagination/pagination.dart' as _i12;
import 'package:tech_test/data/model/auth.dart' as _i7;
import 'package:tech_test/data/model/post.dart' as _i3;
import 'package:tech_test/data/model/user.dart' as _i10;
import 'package:tech_test/data/repository/auth_repository.dart' as _i4;
import 'package:tech_test/data/repository/local_repository.dart' as _i8;
import 'package:tech_test/data/repository/post_repository.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePost_1 extends _i1.SmartFake implements _i3.Post {
  _FakePost_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Authentication>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.Authentication>>.value(
                _FakeEither_0<_i6.Failure, _i7.Authentication>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Authentication>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [LocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalRepository extends _i1.Mock implements _i8.LocalRepository {
  MockLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<dynamic> initHive() => (super.noSuchMethod(
        Invocation.method(
          #initHive,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<void> clearHive() => (super.noSuchMethod(
        Invocation.method(
          #clearHive,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  T getValue<T>({
    required String? key,
    dynamic defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [],
          {
            #key: key,
            #defaultValue: defaultValue,
          },
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #getValue,
            [],
            {
              #key: key,
              #defaultValue: defaultValue,
            },
          ),
        ),
      ) as T);
  @override
  _i5.Future<dynamic> setValue<T>({
    required String? key,
    required T? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValue,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> updateUser(_i10.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> clearUser() => (super.noSuchMethod(
        Invocation.method(
          #clearUser,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i11.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i12.PaginationBase<_i3.Post>>> getPosts({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i12.PaginationBase<_i3.Post>>>.value(
            _FakeEither_0<_i6.Failure, _i12.PaginationBase<_i3.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i12.PaginationBase<_i3.Post>>>);
  @override
  _i5.Future<bool> createPost({
    required String? title,
    required String? textBody,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [],
          {
            #title: title,
            #textBody: textBody,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.Post> getPost(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPost,
          [id],
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_1(
          this,
          Invocation.method(
            #getPost,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Post>);
  @override
  _i5.Future<int> deletePost(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<_i3.Post> updatePost({
    required int? id,
    required String? title,
    required String? textBody,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [],
          {
            #id: id,
            #title: title,
            #textBody: textBody,
          },
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_1(
          this,
          Invocation.method(
            #updatePost,
            [],
            {
              #id: id,
              #title: title,
              #textBody: textBody,
            },
          ),
        )),
      ) as _i5.Future<_i3.Post>);
}
